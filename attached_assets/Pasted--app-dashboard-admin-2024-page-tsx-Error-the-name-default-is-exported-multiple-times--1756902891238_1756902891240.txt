./app/dashboard-admin-2024/page.tsx
Error: 
  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/app/dashboard-admin-2024/page.tsx:65:1]
  65 │       created_at: string
  66 │     }
  67 │     
  68 │ ╭─▶ export default function AdminDashboard() {
  69 │ │     const router = useRouter()
  70 │ │     const { isAdmin, loading: authLoading } = useIsAdmin()
  71 │ │     const [activeTab, setActiveTab] = useState("overview")
  72 │ │   
  73 │ │     // SWR for data fetching
  74 │ │     const { data: plotsData, error: plotsError, mutate: mutatePlots } = useSWR("/api/plots", fetcher)
  75 │ │     const { data: inquiriesData, error: inquiriesError } = useSWR("/api/inquiry", fetcher)
  76 │ │   
  77 │ │     const plots = plotsData?.plots || []
  78 │ │     const inquiries = inquiriesData?.inquiries || []
  79 │ │   
  80 │ │     // State for dialogs and form
  81 │ │     const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  82 │ │     const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  83 │ │     const [plotForm, setPlotForm] = useState<Partial<Plot>>({
  84 │ │       title: "",
  85 │ │       location: "",
  86 │ │       price: 0,
  87 │ │       size_sqyd: 0,
  88 │ │       description: "",
  89 │ │       featured: false,
  90 │ │     })
  91 │ │     const [editingPlotId, setEditingPlotId] = useState<string | null>(null)
  92 │ │   
  93 │ │     // Redirect if not admin
  94 │ │     useEffect(() => {
  95 │ │       if (!authLoading && !isAdmin) {
  96 │ │         router.push("/sign-in")
  97 │ │       }
  98 │ │     }, [isAdmin, authLoading, router])
  99 │ │   
 100 │ │     // Handle logout
 101 │ │     const handleLogout = async () => {
 102 │ │       try {
 103 │ │         await fetch("/api/auth/mock", { method: "DELETE" })
 104 │ │         router.push("/")
 105 │ │       } catch (error) {
 106 │ │         console.error("Logout error:", error)
 107 │ │       }
 108 │ │     }
 109 │ │   
 110 │ │     // Plot Management Handlers
 111 │ │     const handleCreatePlot = async () => {
 112 │ │       try {
 113 │ │         const res = await fetch("/api/plots", {
 114 │ │           method: "POST",
 115 │ │           headers: { "Content-Type": "application/json" },
 116 │ │           body: JSON.stringify(plotForm),
 117 │ │         })
 118 │ │         if (res.ok) {
 119 │ │           mutatePlots() // Revalidate SWR cache
 120 │ │           setIsCreateDialogOpen(false)
 121 │ │           setPlotForm({ title: "", location: "", price: 0, size_sqyd: 0, description: "", featured: false })
 122 │ │         } else {
 123 │ │           console.error("Failed to create plot")
 124 │ │         }
 125 │ │       } catch (error) {
 126 │ │         console.error("Error creating plot:", error)
 127 │ │       }
 128 │ │     }
 129 │ │   
 130 │ │     const handleEditPlot = async () => {
 131 │ │       if (!editingPlotId) return;
 132 │ │       try {
 133 │ │         const res = await fetch(`/api/plots/${editingPlotId}`, {
 134 │ │           method: "PUT",
 135 │ │           headers: { "Content-Type": "application/json" },
 136 │ │           body: JSON.stringify(plotForm),
 137 │ │         })
 138 │ │         if (res.ok) {
 139 │ │           mutatePlots() // Revalidate SWR cache
 140 │ │           setIsEditDialogOpen(false)
 141 │ │           setEditingPlotId(null)
 142 │ │           setPlotForm({ title: "", location: "", price: 0, size_sqyd: 0, description: "", featured: false })
 143 │ │         } else {
 144 │ │           console.error("Failed to edit plot")
 145 │ │         }
 146 │ │       } catch (error) {
 147 │ │         console.error("Error editing plot:", error)
 148 │ │       }
 149 │ │     }
 150 │ │   
 151 │ │     const handleDeletePlot = async (id: string) => {
 152 │ │       if (!confirm("Are you sure you want to delete this plot?")) return;
 153 │ │       try {
 154 │ │         const res = await fetch(`/api/plots/${id}`, {
 155 │ │           method: "DELETE",
 156 │ │         })
 157 │ │         if (res.ok) {
 158 │ │           mutatePlots() // Revalidate SWR cache
 159 │ │         } else {
 160 │ │           console.error("Failed to delete plot")
 161 │ │         }
 162 │ │       } catch (error) {
 163 │ │         console.error("Error deleting plot:", error)
 164 │ │       }
 165 │ │     }
 166 │ │   
 167 │ │     const openEditDialog = (plot: Plot) => {
 168 │ │       setEditingPlotId(plot.id)
 169 │ │       setPlotForm({
 170 │ │         title: plot.title,
 171 │ │         location: plot.location,
 172 │ │         price: plot.price,
 173 │ │         size_sqyd: plot.size_sqyd,
 174 │ │         description: plot.description,
 175 │ │         featured: plot.featured,
 176 │ │       })
 177 │ │       setIsEditDialogOpen(true)
 178 │ │     }
 179 │ │   
 180 │ │     // Blog Management - Placeholder functions for now
 181 │ │     const handleCreateBlogPost = () => {
 182 │ │       alert("Create New Blog Post functionality not yet implemented.")
 183 │ │     }
 184 │ │   
 185 │ │     const handleCreateFirstBlogPost = () => {
 186 │ │       alert("Create First Blog Post functionality not yet implemented.")
 187 │ │     }
 188 │ │     
 189 │ │     const handleAddPlot = () => {
 190 │ │       setIsCreateDialogOpen(true)
 191 │ │     }
 192 │ │   
 193 │ │     const handleAddFirstPlot = () => {
 194 │ │       setIsCreateDialogOpen(true)
 195 │ │     }
 196 │ │   
 197 │ │   
 198 │ │     if (authLoading) {
 199 │ │       return (
 200 │ │         <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center">
 201 │ │           <div className="text-white text-xl">Loading...</div>
 202 │ │         </div>
 203 │ │       )
 204 │ │     }
 205 │ │   
 206 │ │     if (!isAdmin) {
 207 │ │       return null
 208 │ │     }
 209 │ │   
 210 │ │     return (
 211 │ │       <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
 212 │ │         {/* Header */}
 213 │ │         <div className="border-b border-white/10 bg-black/20 backdrop-blur-sm">
 214 │ │           <div className="container mx-auto px-6 py-4">
 215 │ │             <div className="flex items-center justify-between">
 216 │ │               <div className="flex items-center space-x-4">
 217 │ │                 <div className="w-10 h-10 bg-gradient-to-r from-green-400 to-blue-500 rounded-lg flex items-center justify-center">
 218 │ │                   <Settings className="w-6 h-6 text-white" />
 219 │ │                 </div>
 220 │ │                 <div>
 221 │ │                   <h1 className="text-2xl font-bold text-white">Admin Dashboard</h1>
 222 │ │                   <p className="text-sm text-white/60">Manage your real estate platform</p>
 223 │ │                 </div>
 224 │ │               </div>
 225 │ │               <div className="flex items-center space-x-4">
 226 │ │                 <Button
 227 │ │                   variant="ghost"
 228 │ │                   size="sm"
 229 │ │                   onClick={() => router.push("/")}
 230 │ │                   className="text-white hover:bg-white/10"
 231 │ │                 >
 232 │ │                   <Home className="w-4 h-4 mr-2" />
 233 │ │                   Visit Site
 234 │ │                 </Button>
 235 │ │                 <Button
 236 │ │                   variant="ghost"
 237 │ │                   size="sm"
 238 │ │                   onClick={handleLogout}
 239 │ │                   className="text-white hover:bg-white/10"
 240 │ │                 >
 241 │ │                   <LogOut className="w-4 h-4 mr-2" />
 242 │ │                   Logout
 243 │ │                 </Button>
 244 │ │               </div>
 245 │ │             </div>
 246 │ │           </div>
 247 │ │         </div>
 248 │ │   
 249 │ │         {/* Main Content */}
 250 │ │         <div className="container mx-auto px-6 py-8">
 251 │ │           <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
 252 │ │             <TabsList className="grid w-full grid-cols-4 bg-black/20 border border-white/10">
 253 │ │               <TabsTrigger value="overview" className="text-white data-[state=active]:bg-white/20">
 254 │ │                 <BarChart3 className="w-4 h-4 mr-2" />
 255 │ │                 Overview
 256 │ │               </TabsTrigger>
 257 │ │               <TabsTrigger value="plots" className="text-white data-[state=active]:bg-white/20">
 258 │ │                 <MapPin className="w-4 h-4 mr-2" />
 259 │ │                 Plots
 260 │ │               </TabsTrigger>
 261 │ │               <TabsTrigger value="blog" className="text-white data-[state=active]:bg-white/20">
 262 │ │                 <FileText className="w-4 h-4 mr-2" />
 263 │ │                 Blog
 264 │ │               </TabsTrigger>
 265 │ │               <TabsTrigger value="inquiries" className="text-white data-[state=active]:bg-white/20">
 266 │ │                 <Mail className="w-4 h-4 mr-2" />
 267 │ │                 Inquiries
 268 │ │               </TabsTrigger>
 269 │ │             </TabsList>
 270 │ │   
 271 │ │             {/* Overview Tab */}
 272 │ │             <TabsContent value="overview" className="space-y-6">
 273 │ │               <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
 274 │ │                 <Card className="bg-black/20 border-white/10 text-white">
 275 │ │                   <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 276 │ │                     <CardTitle className="text-sm font-medium">Total Plots</CardTitle>
 277 │ │                     <MapPin className="h-4 w-4 text-green-400" />
 278 │ │                   </CardHeader>
 279 │ │                   <CardContent>
 280 │ │                     <div className="text-2xl font-bold">{plots.length}</div>
 281 │ │                     <p className="text-xs text-white/60">Active listings</p>
 282 │ │                   </CardContent>
 283 │ │                 </Card>
 284 │ │   
 285 │ │                 <Card className="bg-black/20 border-white/10 text-white">
 286 │ │                   <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 287 │ │                     <CardTitle className="text-sm font-medium">New Inquiries</CardTitle>
 288 │ │                     <Mail className="h-4 w-4 text-blue-400" />
 289 │ │                   </CardHeader>
 290 │ │                   <CardContent>
 291 │ │                     <div className="text-2xl font-bold">{inquiries.length}</div>
 292 │ │                     <p className="text-xs text-white/60">Pending responses</p>
 293 │ │                   </CardContent>
 294 │ │                 </Card>
 295 │ │   
 296 │ │                 <Card className="bg-black/20 border-white/10 text-white">
 297 │ │                   <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 298 │ │                     <CardTitle className="text-sm font-medium">Featured Plots</CardTitle>
 299 │ │                     <Eye className="h-4 w-4 text-purple-400" />
 300 │ │                   </CardHeader>
 301 │ │                   <CardContent>
 302 │ │                     <div className="text-2xl font-bold">{plots.filter(p => p.featured).length}</div>
 303 │ │                     <p className="text-xs text-white/60">Currently featured</p>
 304 │ │                   </CardContent>
 305 │ │                 </Card>
 306 │ │   
 307 │ │                 <Card className="bg-black/20 border-white/10 text-white">
 308 │ │                   <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
 309 │ │                     <CardTitle className="text-sm font-medium">Avg. Price</CardTitle>
 310 │ │                     <DollarSign className="h-4 w-4 text-yellow-400" />
 311 │ │                   </CardHeader>
 312 │ │                   <CardContent>
 313 │ │                     <div className="text-2xl font-bold">
 314 │ │                       ₹{plots.length > 0 ? Math.round(plots.reduce((acc, p) => acc + p.price, 0) / plots.length / 100000) : 0}L
 315 │ │                     </div>
 316 │ │                     <p className="text-xs text-white/60">Per plot</p>
 317 │ │                   </CardContent>
 318 │ │                 </Card>
 319 │ │               </div>
 320 │ │   
 321 │ │               <div className="grid gap-6 md:grid-cols-2">
 322 │ │                 <Card className="bg-black/20 border-white/10 text-white">
 323 │ │                   <CardHeader>
 324 │ │                     <CardTitle>Recent Activity</CardTitle>
 325 │ │                   </CardHeader>
 326 │ │                   <CardContent className="space-y-4">
 327 │ │                     {inquiries.slice(0, 3).map((inquiry) => (
 328 │ │                       <div key={inquiry.id} className="flex items-center space-x-4">
 329 │ │                         <div className="w-2 h-2 bg-green-400 rounded-full" />
 330 │ │                         <div className="flex-1">
 331 │ │                           <p className="text-sm font-medium">{inquiry.name}</p>
 332 │ │                           <p className="text-xs text-white/60">New inquiry received</p>
 333 │ │                         </div>
 334 │ │                         <div className="text-xs text-white/60">
 335 │ │                           {new Date(inquiry.created_at).toLocaleDateString()}
 336 │ │                         </div>
 337 │ │                       </div>
 338 │ │                     ))}
 339 │ │                   </CardContent>
 340 │ │                 </Card>
 341 │ │   
 342 │ │                 <Card className="bg-black/20 border-white/10 text-white">
 343 │ │                   <CardHeader>
 344 │ │                     <CardTitle>Quick Actions</CardTitle>
 345 │ │                   </CardHeader>
 346 │ │                   <CardContent className="space-y-3">
 347 │ │                     <Button 
 348 │ │                       onClick={() => setActiveTab("plots")}
 349 │ │                       className="w-full justify-start bg-green-600 hover:bg-green-700"
 350 │ │                     >
 351 │ │                       <Plus className="w-4 h-4 mr-2" />
 352 │ │                       Add New Plot
 353 │ │                     </Button>
 354 │ │                     <Button 
 355 │ │                       onClick={() => setActiveTab("blog")}
 356 │ │                       className="w-full justify-start bg-blue-600 hover:bg-blue-700"
 357 │ │                     >
 358 │ │                       <FileText className="w-4 h-4 mr-2" />
 359 │ │                       Create Blog Post
 360 │ │                     </Button>
 361 │ │                     <Button 
 362 │ │                       onClick={() => setActiveTab("inquiries")}
 363 │ │                       className="w-full justify-start bg-purple-600 hover:bg-purple-700"
 364 │ │                     >
 365 │ │                       <Mail className="w-4 h-4 mr-2" />
 366 │ │                       View Inquiries
 367 │ │                     </Button>
 368 │ │                   </CardContent>
 369 │ │                 </Card>
 370 │ │               </div>
 371 │ │             </TabsContent>
 372 │ │   
 373 │ │             {/* Plots Management Tab */}
 374 │ │             <TabsContent value="plots" className="space-y-6">
 375 │ │               <div className="flex items-center justify-between">
 376 │ │                 <h2 className="text-3xl font-bold text-white">Manage Plots</h2>
 377 │ │                 <Button onClick={handleAddPlot} className="bg-green-600 hover:bg-green-700">
 378 │ │                   <Plus className="w-4 h-4 mr-2" />
 379 │ │                   Add Plot
 380 │ │                 </Button>
 381 │ │               </div>
 382 │ │   
 383 │ │               <div className="grid gap-6">
 384 │ │                 {plotsError ? (
 385 │ │                   <Card className="bg-red-500/20 border-red-500/30 text-white">
 386 │ │                     <CardContent className="text-center py-12">
 387 │ │                       <MapPin className="w-16 h-16 text-red-300 mx-auto mb-4" />
 388 │ │                       <h3 className="text-lg font-semibold mb-2">Error Loading Plots</h3>
 389 │ │                       <p className="text-red-200 mb-4">
 390 │ │                         Failed to load plots. Please try again.
 391 │ │                       </p>
 392 │ │                       <Button 
 393 │ │                         onClick={() => window.location.reload()} 
 394 │ │                         className="bg-red-600 hover:bg-red-700"
 395 │ │                       >
 396 │ │                         Retry
 397 │ │                       </Button>
 398 │ │                     </CardContent>
 399 │ │                   </Card>
 400 │ │                 ) : plots.length === 0 ? (
 401 │ │                   <Card className="bg-black/20 border-white/10 text-white">
 402 │ │                     <CardContent className="text-center py-12">
 403 │ │                       <MapPin className="w-16 h-16 text-white/40 mx-auto mb-4" />
 404 │ │                       <h3 className="text-lg font-semibold mb-2">No Plots Added</h3>
 405 │ │                       <p className="text-white/60 mb-4">Start by adding your first plot listing.</p>
 406 │ │                       <Button onClick={handleAddFirstPlot} className="bg-green-600 hover:bg-green-700">
 407 │ │                         <Plus className="w-4 h-4 mr-2" />
 408 │ │                         Add Your First Plot
 409 │ │                       </Button>
 410 │ │                     </CardContent>
 411 │ │                   </Card>
 412 │ │                 ) : (
 413 │ │                   <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
 414 │ │                     {plots.map((plot) => (
 415 │ │                       <Card key={plot.id} className="bg-black/20 border-white/10 text-white">
 416 │ │                         <CardHeader>
 417 │ │                           <div className="flex items-center justify-between">
 418 │ │                             <CardTitle className="text-lg">{plot.title}</CardTitle>
 419 │ │                             {plot.featured && (
 420 │ │                               <Badge className="bg-yellow-500/20 text-yellow-300">Featured</Badge>
 421 │ │                             )}
 422 │ │                           </div>
 423 │ │                           <CardDescription className="text-white/70">
 424 │ │                             {plot.location}
 425 │ │                           </CardDescription>
 426 │ │                         </CardHeader>
 427 │ │                         <CardContent>
 428 │ │                           <div className="space-y-2">
 429 │ │                             <div className="flex justify-between text-sm">
 430 │ │                               <span className="text-white/60">Price:</span>
 431 │ │                               <span className="font-semibold">₹{(plot.price / 100000).toFixed(1)}L</span>
 432 │ │                             </div>
 433 │ │                             <div className="flex justify-between text-sm">
 434 │ │                               <span className="text-white/60">Size:</span>
 435 │ │                               <span>{plot.size_sqyd} sq.yd</span>
 436 │ │                             </div>
 437 │ │                             <div className="flex space-x-2 mt-4">
 438 │ │                               <Button size="sm" variant="outline" className="flex-1 border-white/20 text-white hover:bg-white/10" onClick={() => openEditDialog(plot)}>
 439 │ │                                 <Edit className="w-3 h-3 mr-1" />
 440 │ │                                 Edit
 441 │ │                               </Button>
 442 │ │                               <Button size="sm" variant="outline" className="flex-1 border-red-400/20 text-red-300 hover:bg-red-500/10" onClick={() => handleDeletePlot(plot.id)}>
 443 │ │                                 <Trash2 className="w-3 h-3 mr-1" />
 444 │ │                                 Delete
 445 │ │                               </Button>
 446 │ │                             </div>
 447 │ │                           </div>
 448 │ │                         </CardContent>
 449 │ │                       </Card>
 450 │ │                     ))}
 451 │ │                   </div>
 452 │ │                 )}
 453 │ │               </div>
 454 │ │             </TabsContent>
 455 │ │   
 456 │ │             {/* Blog Management Tab */}
 457 │ │             <TabsContent value="blog" className="space-y-6">
 458 │ │               <div className="flex items-center justify-between">
 459 │ │                 <h2 className="text-3xl font-bold text-white">Manage Blog</h2>
 460 │ │                 <Button onClick={handleCreateBlogPost} className="bg-blue-600 hover:bg-blue-700">
 461 │ │                   <Plus className="w-4 h-4 mr-2" />
 462 │ │                   New Post
 463 │ │                 </Button>
 464 │ │               </div>
 465 │ │   
 466 │ │               <Card className="bg-black/20 border-white/10 text-white">
 467 │ │                 <CardContent className="text-center py-12">
 468 │ │                   <FileText className="w-16 h-16 text-white/40 mx-auto mb-4" />
 469 │ │                   <h3 className="text-lg font-semibold mb-2">Blog Management</h3>
 470 │ │                   <p className="text-white/60 mb-4">Create and manage blog posts for your website.</p>
 471 │ │                   <Button onClick={handleCreateFirstBlogPost} className="bg-blue-600 hover:bg-blue-700">
 472 │ │                     <Plus className="w-4 h-4 mr-2" />
 473 │ │                     Create Your First Post
 474 │ │                   </Button>
 475 │ │                 </CardContent>
 476 │ │               </Card>
 477 │ │             </TabsContent>
 478 │ │   
 479 │ │             {/* Inquiries Tab */}
 480 │ │             <TabsContent value="inquiries" className="space-y-6">
 481 │ │               <h2 className="text-3xl font-bold text-white">Customer Inquiries</h2>
 482 │ │   
 483 │ │               <div className="grid gap-4">
 484 │ │                 {inquiriesError ? (
 485 │ │                   <Card className="bg-red-500/20 border-red-500/30 text-white">
 486 │ │                     <CardContent className="text-center py-12">
 487 │ │                       <Mail className="w-16 h-16 text-red-300 mx-auto mb-4" />
 488 │ │                       <h3 className="text-lg font-semibold mb-2">Error Loading Inquiries</h3>
 489 │ │                       <p className="text-red-200 mb-4">
 490 │ │                         Failed to load inquiries. Error: {inquiriesError.message || "Unknown error"}
 491 │ │                       </p>
 492 │ │                       <Button 
 493 │ │                         onClick={() => window.location.reload()} 
 494 │ │                         className="bg-red-600 hover:bg-red-700"
 495 │ │                       >
 496 │ │                         Retry
 497 │ │                       </Button>
 498 │ │                     </CardContent>
 499 │ │                   </Card>
 500 │ │                 ) : inquiries.length === 0 ? (
 501 │ │                   <Card className="bg-black/20 border-white/10 text-white">
 502 │ │                     <CardContent className="text-center py-12">
 503 │ │                       <Mail className="w-16 h-16 text-white/40 mx-auto mb-4" />
 504 │ │                       <h3 className="text-lg font-semibold mb-2">No Inquiries Yet</h3>
 505 │ │                       <p className="text-white/60">
 506 │ │                         Customer inquiries will appear here when submitted through the contact form.
 507 │ │                       </p>
 508 │ │                       <p className="text-white/40 text-sm mt-2">
 509 │ │                         Debug: Found {inquiries.length} inquiries in response
 510 │ │                       </p>
 511 │ │                     </CardContent>
 512 │ │                   </Card>
 513 │ │                 ) : (
 514 │ │                   inquiries.map((inquiry) => (
 515 │ │                     <Card key={inquiry.id} className="bg-black/20 border-white/10 text-white">
 516 │ │                       <CardHeader>
 517 │ │                         <div className="flex items-center justify-between">
 518 │ │                           <CardTitle className="text-lg">{inquiry.name}</CardTitle>
 519 │ │                           <Badge variant="secondary" className="bg-green-500/20 text-green-300">
 520 │ │                             New
 521 │ │                           </Badge>
 522 │ │                         </div>
 523 │ │                         <CardDescription className="text-white/70">
 524 │ │                           {inquiry.email} {inquiry.phone && `• ${inquiry.phone}`}
 525 │ │                         </CardDescription>
 526 │ │                       </CardHeader>
 527 │ │                       <CardContent>
 528 │ │                         <p className="text-white/80 mb-3">{inquiry.message}</p>
 529 │ │                         <div className="flex items-center justify-between text-sm text-white/60">
 530 │ │                           <span>Received: {new Date(inquiry.created_at).toLocaleDateString()}</span>
 531 │ │                           {inquiry.plot_id && (
 532 │ │                             <span>Plot Interest: {inquiry.plot_id}</span>
 533 │ │                           )}
 534 │ │                         </div>
 535 │ │                       </CardContent>
 536 │ │                     </Card>
 537 │ │                   ))
 538 │ │                 )}
 539 │ │               </div>
 540 │ │             </TabsContent>
 541 │ │           </Tabs>
 542 │ │         </div>
 543 │ │   
 544 │ │         {/* Create Plot Dialog */}
 545 │ │         <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
 546 │ │           <DialogContent className="bg-slate-900 border-white/20 text-white">
 547 │ │             <DialogHeader>
 548 │ │               <DialogTitle>Create New Plot</DialogTitle>
 549 │ │             </DialogHeader>
 550 │ │             <div className="space-y-4">
 551 │ │               <div>
 552 │ │                 <Label htmlFor="title">Title</Label>
 553 │ │                 <Input
 554 │ │                   id="title"
 555 │ │                   value={plotForm.title}
 556 │ │                   onChange={(e) => setPlotForm({...plotForm, title: e.target.value})}
 557 │ │                   className="bg-black/20 border-white/20 text-white"
 558 │ │                 />
 559 │ │               </div>
 560 │ │               <div>
 561 │ │                 <Label htmlFor="location">Location</Label>
 562 │ │                 <Input
 563 │ │                   id="location"
 564 │ │                   value={plotForm.location}
 565 │ │                   onChange={(e) => setPlotForm({...plotForm, location: e.target.value})}
 566 │ │                   className="bg-black/20 border-white/20 text-white"
 567 │ │                 />
 568 │ │               </div>
 569 │ │               <div className="grid grid-cols-2 gap-4">
 570 │ │                 <div>
 571 │ │                   <Label htmlFor="price">Price (₹)</Label>
 572 │ │                   <Input
 573 │ │                     id="price"
 574 │ │                     type="number"
 575 │ │                     value={plotForm.price}
 576 │ │                     onChange={(e) => setPlotForm({...plotForm, price: Number(e.target.value)})}
 577 │ │                     className="bg-black/20 border-white/20 text-white"
 578 │ │                   />
 579 │ │                 </div>
 580 │ │                 <div>
 581 │ │                   <Label htmlFor="size">Size (sq.yd)</Label>
 582 │ │                   <Input
 583 │ │                     id="size"
 584 │ │                     type="number"
 585 │ │                     value={plotForm.size_sqyd}
 586 │ │                     onChange={(e) => setPlotForm({...plotForm, size_sqyd: Number(e.target.value)})}
 587 │ │                     className="bg-black/20 border-white/20 text-white"
 588 │ │                   />
 589 │ │                 </div>
 590 │ │               </div>
 591 │ │               <div>
 592 │ │                 <Label htmlFor="description">Description</Label>
 593 │ │                 <Textarea
 594 │ │                   id="description"
 595 │ │                   value={plotForm.description}
 596 │ │                   onChange={(e) => setPlotForm({...plotForm, description: e.target.value})}
 597 │ │                   className="bg-black/20 border-white/20 text-white"
 598 │ │                 />
 599 │ │               </div>
 600 │ │               <div className="flex items-center space-x-2">
 601 │ │                 <Switch
 602 │ │                   id="featured"
 603 │ │                   checked={plotForm.featured}
 604 │ │                   onCheckedChange={(checked) => setPlotForm({...plotForm, featured: checked})}
 605 │ │                 />
 606 │ │                 <Label htmlFor="featured">Featured Plot</Label>
 607 │ │               </div>
 608 │ │               <div className="flex space-x-2 pt-4">
 609 │ │                 <Button onClick={handleCreatePlot} className="flex-1 bg-green-600 hover:bg-green-700">
 610 │ │                   Create Plot
 611 │ │                 </Button>
 612 │ │                 <Button 
 613 │ │                   onClick={() => setIsCreateDialogOpen(false)} 
 614 │ │                   variant="outline" 
 615 │ │                   className="flex-1 border-white/20 text-white hover:bg-white/10"
 616 │ │                 >
 617 │ │                   Cancel
 618 │ │                 </Button>
 619 │ │               </div>
 620 │ │             </div>
 621 │ │           </DialogContent>
 622 │ │         </Dialog>
 623 │ │   
 624 │ │         {/* Edit Plot Dialog */}
 625 │ │         <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
 626 │ │           <DialogContent className="bg-slate-900 border-white/20 text-white">
 627 │ │             <DialogHeader>
 628 │ │               <DialogTitle>Edit Plot</DialogTitle>
 629 │ │             </DialogHeader>
 630 │ │             <div className="space-y-4">
 631 │ │               <div>
 632 │ │                 <Label htmlFor="edit-title">Title</Label>
 633 │ │                 <Input
 634 │ │                   id="edit-title"
 635 │ │                   value={plotForm.title}
 636 │ │                   onChange={(e) => setPlotForm({...plotForm, title: e.target.value})}
 637 │ │                   className="bg-black/20 border-white/20 text-white"
 638 │ │                 />
 639 │ │               </div>
 640 │ │               <div>
 641 │ │                 <Label htmlFor="edit-location">Location</Label>
 642 │ │                 <Input
 643 │ │                   id="edit-location"
 644 │ │                   value={plotForm.location}
 645 │ │                   onChange={(e) => setPlotForm({...plotForm, location: e.target.value})}
 646 │ │                   className="bg-black/20 border-white/20 text-white"
 647 │ │                 />
 648 │ │               </div>
 649 │ │               <div className="grid grid-cols-2 gap-4">
 650 │ │                 <div>
 651 │ │                   <Label htmlFor="edit-price">Price (₹)</Label>
 652 │ │                   <Input
 653 │ │                     id="edit-price"
 654 │ │                     type="number"
 655 │ │                     value={plotForm.price}
 656 │ │                     onChange={(e) => setPlotForm({...plotForm, price: Number(e.target.value)})}
 657 │ │                     className="bg-black/20 border-white/20 text-white"
 658 │ │                   />
 659 │ │                 </div>
 660 │ │                 <div>
 661 │ │                   <Label htmlFor="edit-size">Size (sq.yd)</Label>
 662 │ │                   <Input
 663 │ │                     id="edit-size"
 664 │ │                     type="number"
 665 │ │                     value={plotForm.size_sqyd}
 666 │ │                     onChange={(e) => setPlotForm({...plotForm, size_sqyd: Number(e.target.value)})}
 667 │ │                     className="bg-black/20 border-white/20 text-white"
 668 │ │                   />
 669 │ │                 </div>
 670 │ │               </div>
 671 │ │               <div>
 672 │ │                 <Label htmlFor="edit-description">Description</Label>
 673 │ │                 <Textarea
 674 │ │                   id="edit-description"
 675 │ │                   value={plotForm.description}
 676 │ │                   onChange={(e) => setPlotForm({...plotForm, description: e.target.value})}
 677 │ │                   className="bg-black/20 border-white/20 text-white"
 678 │ │                 />
 679 │ │               </div>
 680 │ │               <div className="flex items-center space-x-2">
 681 │ │                 <Switch
 682 │ │                   id="edit-featured"
 683 │ │                   checked={plotForm.featured}
 684 │ │                   onCheckedChange={(checked) => setPlotForm({...plotForm, featured: checked})}
 685 │ │                 />
 686 │ │                 <Label htmlFor="edit-featured">Featured Plot</Label>
 687 │ │               </div>
 688 │ │               <div className="flex space-x-2 pt-4">
 689 │ │                 <Button onClick={handleEditPlot} className="flex-1 bg-blue-600 hover:bg-blue-700">
 690 │ │                   Update Plot
 691 │ │                 </Button>
 692 │ │                 <Button 
 693 │ │                   onClick={() => setIsEditDialogOpen(false)} 
 694 │ │                   variant="outline" 
 695 │ │                   className="flex-1 border-white/20 text-white hover:bg-white/10"
 696 │ │                 >
 697 │ │                   Cancel
 698 │ │                 </Button>
 699 │ │               </div>
 700 │ │             </div>
 701 │ │           </DialogContent>
 702 │ │         </Dialog>
 703 │ │       </div>
 704 │ │     )
 705 │ ├─▶ }
     · ╰──── previous exported here
 706 │     
 707 │ ╭─▶ export default function AdminPage() {
 708 │ │     return <AdminDashboard />
 709 │ ├─▶ }
     · ╰──── exported more than once
     ╰────

Error: 
  ☞ Exported identifiers must be unique
This error occurred during the build process and can only be dismissed by fixing the error.